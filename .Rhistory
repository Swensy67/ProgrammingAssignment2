install.packages("slidify")
install.packages("KernSmooth")
load(KernSmooth)
install.packages("KernSmooth")
load(KernSmooth)
find.package(kernSmooth())
load(KernSmooth())
find.package(KernSmooth)
find.package(KernSmooth())
find.package("KernSmooth")
load(C:/Users/Swensy/Documents/R/win-library/3.4/KernSmooth)
load("C:/Users/Swensy/Documents/R/win-library/3.4/KernSmooth)
source("https://bioconductor.org/biocLite.R")
biocLite("KernSmooth")
load(KernSmooth)
load(KernSmooth())
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(KernSmooth)
load(KernSmooth)
library(KernSmooth)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6 < 7
10 <= 10
5 != 7
NOT (5 == 7)
play()
?'NOT'
nxt()
NOT 5 == 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
play()
?sd
nxt()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Salut la compagnie!")
submit()
mad_libs("Strasbourg", "tall", "statue")
play()
mad_libs("Strasbourg tall statue")
mad_libs(place = "Strasbourg", adjective = "tall", noun = "statue")
nxt()
submit()
"I" %p% "love" %p% "you"
("I" %p% "love") %p% "you"
info()
submit()
submit()
"I" %p% "love" %p% "you"
"I" %p% "love"
submit()
"I" %p% "love" %p% "you"
'I' %p% 'love' %p% 'you'
('I' %p% 'love') %p% 'you'
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
play()
?unclass
nxt()
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
play()
months(d1)
nxt()
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x,n){}
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if (x >5) {
x <- 0
}
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x + g(x)
}â™¦
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
g(2)
library(swirl)
ls()
rm(list=ls())
ls()
library(swirl)
swirl()
head(flags)
dim(flags)
play()
viewinfo()
nxt()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
iris
colMeans(iris)
rowMeans(iris)
rowMeans(iris[,1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars[, 1], mtcars[, 2], mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$hp, mtcar$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls()
debug(ls)
ls()
?debug
setwd("C:/Users/Swensy/ProgrammingAssignment2")
source("cachematrix.R")
v <- makeCacheMatrix()
v$get()
v$set(c(1, 2, 3, 4))
v$get()
v$set(matrix(1:4, 2, 2))
v$set()
v$get()
v <- makeCacheMatrix()
v$get()
v$getinv()
m1
m1 <- matrix(1:4, 2, 2)
m1
mcm <- makeCacheMatrix(m1)
mcm$get()
mcm$setinv(solve(m1))
mcm$getinv()
m2 <- matrix(5:13, 3, 3)
m2
cacheSolve(m2)
cacheSolve(mcm)
mcm2 <- makeCacheMatrix(matrix(5:13, 3, 3))
mcm2$get()
cacheSolve(mcm2)
solve(matrix(5:13, 3, 3))
mcm2 <- makeCacheMatrix(matrix(5:8, 2, 2))
mcm2$get()
cacheSolve(mcm2)
cacheSolve(mcm2)
source("cachematrix.R")
mcm <- makeCacheMatrix()
mcm$get()
mcm$getinv()
m1 <- matrix(1:4, 2, 2)
m1
mcm$set(m1)
mcm$get()
mcm$setinv(solve(m1))
mcm$getinv()
solve(m1)
mcm <- makeCacheMatrix()
mcm$get()
mcm <- makeCacheMatrix(m1)
mcm$get()
mcm$getinv()
mcm$setinv(solve(m1))
mcm$getinv()
cacheSolve(mcm)
mcm2 <- makeCacheMatrix(matrix(5:8, 2, 2))
cacheSolve(mcm2)
cacheSolve(mcm2)
cacheSolve(mcm)
cacheSolve(mcm)
cacheSolve(mcm2)
solve(matrix(5:8, 2, 2))
